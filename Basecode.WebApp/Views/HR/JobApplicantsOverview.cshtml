@using Basecode.Data.Enums;
@using Basecode.Data.Models
@using static Basecode.Data.Enums.Enums;
@using Basecode.Services.Interfaces
@inject IJobPostingsService jobPostingService;
@using System.Drawing;
@model JobApplicantOverviewModel
@{
	ViewData["Title"] = "Job Applicants Overview";
	Layout = "_SideBarAdmin";
	<meta name="viewport" content="width=device-width" />
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.min.css">
	<link rel="stylesheet" href="~/css/JobApplicantsOverview.css" />
}

<div class="container container-header">
	<h1>@ViewData["Title"]</h1>
</div>
<div class="container table-container">
	<div class="select-container">
		<label for="position">Position:</label>
		<select id="position" name="position">
			<option value="ALL">ALL</option>
			@foreach (var jobPosting in Model.jobPostings)
			{		
				<option value="@jobPosting.Name">@jobPosting.Name</option>
			}
		</select>
		<label for="status" style="margin-left: 20px;">Status:</label>
		<select id="status" name="status">
			<option value="ALL">ALL</option>
			@foreach (ApplicationStatus status in Enum.GetValues(typeof(ApplicationStatus)))
			{
				<option value="@status.ToString()">@EnumHelper.GetEnumDescription(status)</option>
			}
		</select>
	</div>
	<div class="table-responsive">
		<table class="table">
			<thead>
				<tr class="text-center">
					<th scope="col" class="col-2" style="border-left: 10px solid #55729B; border-bottom: none;">Applicant Name</th>
					<th scope="col" class="col-2">Position Name</th>
					<th scope="col" class="col-2">Status</th>
					<th scope="col" class="col-3" style="border-right: 10px solid #55729B; border-bottom: none;">Action</th>
				</tr>
			</thead>
			<tbody>
				<!-- Data rows displayed here -->
				@foreach (var applicant in Model.applicants)
				{
					Color statusColor = EnumHelper.GetColorForApplicationStatus(applicant.ApplicationStatus);
					string colorStyle = $"color: {ColorTranslator.ToHtml(statusColor)}";
					var jobPost = jobPostingService.GetById(applicant.JobId);
					var positionName = jobPost?.Name;
					<a asp-route-id="Id" asp-controller="HR" asp-action="ApplicantDetail">
					<tr>
						<td>@applicant.Name</td>
						<td>@positionName</td>
						<td class="text-bold" style ="@colorStyle">@EnumHelper.GetEnumDescription(((ApplicationStatus)Enum.Parse(typeof(ApplicationStatus), applicant.ApplicationStatus.ToString())))</td>
						<td>
							<div class="applicant-container" data-title="@applicant.ApplicationStatus">
								@switch (applicant.ApplicationStatus)
								{
									case ApplicationStatus.Received:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Shortlisted" />
											<button type="submit" class="btn status-btn status-change-btn">SHORTLIST</button>
										</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Rejected" />
											<button type="submit" class="btn reject-btn">REJECT</button>
										</form>
											break;
									case ApplicationStatus.Shortlisted:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="ForScreening" />
											<button type="submit" class="btn status-btn status-change-btn">FOR SCREENING</button>
										</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Rejected" />
											<button type="submit" class="btn reject-btn">REJECT</button>
										</form>
											break;
									case ApplicationStatus.ForScreening:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="ForHRInterview" />
											<button type="submit" class="btn status-btn status-change-btn">INVITE TO HR INTERVIEW</button>
											</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Rejected" />
											<button type="submit" class="btn reject-btn">REJECT</button>
										</form>
											break;
										case ApplicationStatus.ForHRInterview:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="ForTechnicalInterview" />
											<button type="submit" class="btn status-btn status-change-btn">INVITE TO TECHNICAL INTERVIEW</button>
											</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Rejected" />
											<button type="submit" class="btn reject-btn">REJECT</button>
										</form>
											break;
										case ApplicationStatus.ForTechnicalInterview:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="ForTechnicalExam" />
											<button type="submit" class="btn status-btn status-change-btn">INVITE TO TECHNICAL EXAM</button>
										</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Rejected" />
											<button type="submit" class="btn reject-btn">REJECT</button>
										</form>
											break;
									case ApplicationStatus.ForTechnicalExam:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="UndergoingBackgroundCheck" />
											<button type="submit" class="btn status-btn status-change-btn">CHECK BACKGROUND</button>
										</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Rejected" />
											<button type="submit" class="btn reject-btn">REJECT</button>
										</form>
											break;
									case ApplicationStatus.UndergoingBackgroundCheck:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="ForFinalInterview" />
											<button type="submit" class="btn status-btn status-change-btn">INVITE TO FINAL INTERVIEW</button>
										</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Rejected" />
											<button type="submit" class="btn reject-btn">REJECT</button>
										</form>
											break;
									case ApplicationStatus.ForFinalInterview:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="UndergoingJobOffer" />
											<button type="submit" class="btn status-btn status-change-btn">SEND JOB OFFER</button>
											</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Rejected" />
											<button type="submit" class="btn reject-btn">REJECT</button>
										</form>
											break;
									case ApplicationStatus.UndergoingJobOffer:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Confirmed" />
											<button type="submit" class="btn status-btn status-change-btn">CONFIRM</button>
										</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="NotConfirmed" />
											<button type="submit" class="btn reject-btn">DECLINE</button>
										</form>
											break;
										case ApplicationStatus.Confirmed:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Onboarding" />
											<button type="submit" class="btn status-btn status-change-btn">ONBOARD</button>
										</form>
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="NotConfirmed" />
											<button type="submit" class="btn reject-btn">DECLINE</button>
										</form>
											break;
									case ApplicationStatus.Onboarding:
										<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
											<input type="hidden" name="id" value="@applicant.Id" />
											<input type="hidden" name="status" value="Deployed" />
											<button type="submit" class="btn status-btn status-change-btn" style="justify-content: flex-start !important;">DEPLOY</button>
											</form>
											break;
										default:
										break;
								}
							</div>
						</td>
					</tr>
					</a>
				}
			</tbody>
		</table>
	</div>
	<div class="pagination-container">
		<ul class="pagination">
			<!-- Pagination links will be added dynamically via JavaScript -->
		</ul>
	</div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


<script>
	// ...  demo-data
	$(document).ready(function () {

		const itemsPerPage = 10; // Number of items to display per page
		let currentPage = 1;
		let filteredApplicants = applicants.slice();

		function redirectToApplicantDetail(applicantIndex) {
			const applicant = applicants[applicantIndex];
			const detailUrl = '/HR/ApplicantDetail?name=' + encodeURIComponent(applicant.Name) + '&position=' + encodeURIComponent(applicant.Position) + '&status=' + encodeURIComponent(applicant.Status);
			window.location.href = detailUrl;
		}

		function handleButtonClicks() {
			// Add click event handler to each row
			$(".table tbody tr").on("click", function () {
				const applicantIndex = $(this).attr("data-applicant-index");
				redirectToApplicantDetail(applicantIndex);
			});

			// Add click event handler for buttons
			$(".table tbody tr .status-btn").on("click", function (event) {
				event.stopPropagation();

				const button = $(this);
				const row = button.closest("tr");
				const applicantIndex = row.attr("data-applicant-index");
				const applicant = applicants[applicantIndex];

				const buttonText = button.text().trim();
				switch (buttonText) {
					case "FOR REVIEW":
						alert(`${applicant.Name}'s Application is now FOR REVIEW!`);
						break;
					case "SHORTLIST":
						alert(`${applicant.Name}'s Application has been SHORTLISTED!`);
						break;
					case "FOR SCREENING":
						alert(`${applicant.Name}'s Application is now FOR SCREENING!`);
						break;
					case "INVITE TO INTERVIEW":
						alert(`${applicant.Name} has been INVITED TO INTERVIEW!`);
						break;
					case "UNDERGOING JOB OFFER":
						alert(`${applicant.Name}'s is UNDERGOING JOB OFFER!`);
						break;
					case "ONBOARDING":
						alert(`${applicant.Name}'s Application status is ONBOARDING!`);
						break;
					case "DEPLOY":
						alert(`${applicant.Name} has been DEPLOYED!`);
						break;
					case "SEND JOB OFFER":
						alert(`${applicant.Name} has been SENT A JOB OFFER!`);
						break;
					case "CONFIRM":
						alert(`${applicant.Name}'s JOB OFFER has been CONFIRMED!`);
						break;
					default:
						break;
				}
			});

			// Add click event handler for the "REJECT" button
			$(".table tbody tr .reject-btn").on("click", function (event) {
				event.stopPropagation();
				const button = $(this);
				const row = button.closest("tr");
				const applicantIndex = row.attr("data-applicant-index");
				const applicant = applicants[applicantIndex];
				alert(`${applicant.Name}'s Application has been REJECTED!`);
			});

			// Add click event handler for the "DECLINE" button
			$(".table tbody tr .decline-btn").on("click", function (event) {
				event.stopPropagation();
				const button = $(this);
				const row = button.closest("tr");
				const applicantIndex = row.attr("data-applicant-index");
				const applicant = applicants[applicantIndex];
				alert(`${applicant.Name}'s Application has been DECLINED!`);
			});
		}

		function displayData(currentPage) {
			const startIndex = (currentPage - 1) * itemsPerPage;
			const endIndex = startIndex + itemsPerPage;
			const currentApplicants = filteredApplicants.slice(startIndex, endIndex);

			const tbody = $(".table tbody");
			tbody.empty();
			$.each(currentApplicants, function (index, applicant) {
				const row = $(`<tr>`);
				const applicantIndex = applicants.indexOf(applicant);
				row.attr("data-applicant-index", applicantIndex);
				row.append(`<td title="Click to View Applicant Details">${applicant.Name}</td>`);
				row.append(`<td title="Click to View Applicant Details">${applicant.Position}</td>`);
				row.append(`<td title="Click to View Applicant Details">${applicant.Status}</td>`);
				row.append(`
				  <td>
					<div class="applicant-container" data-title="${applicant.Status}">
					  ${getStatusButtons(applicant.Status)}
					</div>
				  </td>
			`);
				tbody.append(row);
			});

			handleButtonClicks();
		}

		function displayPagination() {
			const totalItems = filteredApplicants.length;
			const totalPages = Math.ceil(totalItems / itemsPerPage);

			const paginationContainer = $(".pagination");
			paginationContainer.empty();

			// Previous button
			const prevBtn = `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}"><a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a></li>`;
			paginationContainer.append(prevBtn);

			for (let i = 1; i <= totalPages; i++) {
				const pageLink = `<li class="page-item ${currentPage === i ? 'active' : ''}"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
				paginationContainer.append(pageLink);
			}

			// Next button
			const nextBtn = `<li class="page-item ${currentPage < totalPages ? '' : 'disabled'}"><a class="page-link" href="#" data-page="${currentPage + 1}">Next</a></li>`;
			paginationContainer.append(nextBtn);

			$(".pagination").on("click", ".page-link", function (event) {
				event.preventDefault();
				currentPage = parseInt($(this).data("page"));
				displayData(currentPage);
				displayPagination();
			});
		}

		function applyFilters() {
			const selectedPosition = $("#position").val();
			const selectedStatus = $("#status").val();

			filteredApplicants = applicants.filter(applicant => {
				if (selectedPosition === "ALL" && selectedStatus === "ALL") {
					return true;
				}
				if (selectedPosition === "ALL") {
					return applicant.Status === selectedStatus;
				}
				if (selectedStatus === "ALL") {
					return applicant.Position === selectedPosition;
				}
				return applicant.Position === selectedPosition && applicant.Status === selectedStatus;
			});

			displayData(1);
			displayPagination();
		}

		// Apply filters when the status or position dropdown changes
		$("#status, #position").on("change", function () {
			applyFilters();
		});

		displayData(currentPage);
		displayPagination();
	});

	document.addEventListener("DOMContentLoaded", function () {
		const statusDropdown = document.getElementById('status');
		const titleHeaders = document.querySelectorAll('.title-header');
		const applicantContainers = document.querySelectorAll('.applicant-container');

		// Display filtered data immediately after changing filters
		function applyFilters() {
			displayData(); 
			displayPagination();
		}

		statusDropdown.onchange = function () {
			applyFilters();

			const selectedStatus = statusDropdown.value;
			const selectedHeader = document.querySelector('.title-header[data-title="' + selectedStatus + '"]');
			if (selectedHeader) {
				selectedHeader.style.display = 'flex';
			}

			if (selectedStatus === 'ALL') {
				applicantContainers.forEach(container => {
					container.style.display = 'flex';
				});
			} else {
				applicantContainers.forEach(container => {
					container.style.display = 'none';
				});

				const selectedContainers = document.querySelectorAll('.applicant-container[data-title="' + selectedStatus + '"]');
				selectedContainers.forEach(container => {
					container.style.display = 'flex';
				});
			}
		};
	});
</script>