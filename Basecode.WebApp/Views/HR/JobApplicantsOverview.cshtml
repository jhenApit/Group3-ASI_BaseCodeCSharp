@using Basecode.Data.Enums;
@using Basecode.Data.Models
@using static Basecode.Data.Enums.Enums;
@using Basecode.Services.Interfaces
@inject IJobPostingsService jobPostingService;
@using System.Drawing;
@model JobApplicantOverviewModel
@{
	ViewData["Title"] = "Job Applicants Overview";
	Layout = "_SideBarAdmin";
	<link rel="stylesheet" href="~/css/JobApplicantsOverview.css" />
}

<div class="container container-header">
	<h1>@ViewData["Title"]</h1>
</div>
<div class="container table-container">
	<div class="select-container">
		<label for="position">Position:</label>
		<select id="position" name="position" @(Model.applicants.Count == 0 ? "disabled" : "")>
			<option value="ALL">ALL</option>
			@foreach (var jobPosting in Model.jobPostings)
			{
				<option value="@jobPosting.Name">@jobPosting.Name</option>
			}
		</select>
		<label for="status" style="margin-left: 20px;">Status:</label>
		<select id="status" name="status" @(Model.applicants.Count == 0 ? "disabled" : "")>
			<option value="ALL">ALL</option>
			@foreach (ApplicationStatus status in Enum.GetValues(typeof(ApplicationStatus)))
			{
				<option value="@status.ToString()">@EnumHelper.GetEnumDescription(status)</option>
			}
		</select>
	</div>
	<div class="table-responsive">
		<table class="table">
			<thead>
				<tr class="text-center">
					<th scope="col" class="col-2" style="border-left: 10px solid #55729B; border-bottom: none;">Applicant Name</th>
					<th scope="col" class="col-2">Position Name</th>
					<th scope="col" class="col-2">Status</th>
					<th scope="col" class="col-3" style="border-right: 10px solid #55729B !important; border-bottom: none;">Action</th>
				</tr>
			</thead>
			<tbody>
				@{if (Model.applicants.Count == 0)
					{
						<tr class="CurrentApplicants-Empty">
							<td colspan="4">
								No new applicants at the moment...
							</td>
						</tr>
					}
					else
					{
						foreach (var applicant in Model.applicants.OrderBy(a => a.Name))
						{
							Color statusColor = EnumHelper.GetColorForApplicationStatus(applicant.ApplicationStatus);
							string colorStyle = $"color: {ColorTranslator.ToHtml(statusColor)}; font-weight: bolder;";

							// ******** To refactor **************
							var jobPost = await jobPostingService.GetByIdAsync(applicant.JobId);
							var positionName = jobPost?.Name;
							<tr class="clickable-row" data-href="/HR/ApplicantDetail/@applicant.Id">
								<td title="Click to View Applicant Details">@applicant.Name</td>
								<td title="Click to View Applicant Details">@positionName</td>
								<td title="Click to View Applicant Details" style="@colorStyle">@EnumHelper.GetEnumDescription(((ApplicationStatus)Enum.Parse(typeof(ApplicationStatus), applicant.ApplicationStatus.ToString())))</td>
								<td>
									<div class="applicant-container" data-title="@applicant.ApplicationStatus">
										@switch (applicant.ApplicationStatus)
										{
											case ApplicationStatus.Received:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="Shortlisted" />
													<button type="submit" class="btn status-btn status-change-btn">SHORTLIST</button>
												</form>
												break;
											case ApplicationStatus.Shortlisted:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="ForScreening" />
													<button type="submit" class="btn status-btn status-change-btn">FOR SCREENING</button>
												</form>
												break;
											case ApplicationStatus.ForScreening:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="ForHRInterview" />
													<button type="submit" class="btn status-btn status-change-btn">INVITE TO HR INTERVIEW</button>
												</form>
												break;
											case ApplicationStatus.ForHRInterview:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="ForTechnicalInterview" />
													<button type="submit" class="btn status-btn status-change-btn">INVITE TO TECHNICAL INTERVIEW</button>
												</form>
												break;
											case ApplicationStatus.ForTechnicalInterview:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="ForTechnicalExam" />
													<button type="submit" class="btn status-btn status-change-btn">INVITE TO TECHNICAL EXAM</button>
												</form>
												break;
											case ApplicationStatus.ForTechnicalExam:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="UndergoingBackgroundCheck" />
													<button type="submit" class="btn status-btn status-change-btn">CHECK BACKGROUND</button>
												</form>
												break;
											case ApplicationStatus.UndergoingBackgroundCheck:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="ForFinalInterview" />
													<button type="submit" class="btn status-btn status-change-btn">INVITE TO FINAL INTERVIEW</button>
												</form>
												break;
											case ApplicationStatus.ForFinalInterview:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="UndergoingJobOffer" />
													<button type="submit" class="btn status-btn status-change-btn">SEND JOB OFFER</button>
												</form>
												break;
											case ApplicationStatus.UndergoingJobOffer:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="Confirmed" />
													<button type="submit" class="btn status-btn status-change-btn">CONFIRM</button>
												</form>
												break;
											case ApplicationStatus.Confirmed:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="Onboarding" />
													<button type="submit" class="btn status-btn status-change-btn">ONBOARD</button>
												</form>
												break;
											case ApplicationStatus.Onboarding:
												<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
													<input type="hidden" name="id" value="@applicant.Id" />
													<input type="hidden" name="status" value="Deployed" />
													<button type="submit" class="btn status-btn status-change-btn" style="justify-content: flex-start !important;">DEPLOY</button>
												</form>
												break;
											default:
												break;
										}
										@if (applicant.ApplicationStatus != ApplicationStatus.Confirmed && applicant.ApplicationStatus != ApplicationStatus.Onboarding && applicant.ApplicationStatus != ApplicationStatus.Deployed && applicant.ApplicationStatus != ApplicationStatus.Rejected)
										{
											<button type="button" class="btn reject-btn" data-bs-toggle="modal" data-bs-target="#@("modal-" + applicant.Id)" onclick="handleRejectClick(event)">
												REJECT
											</button>
										}
									</div>
								</td>
							</tr>
						}
					}
				}
			</tbody>
		</table>
	</div>
	@if(Model.applicants.Count > 0)
	{
		<div class="pagination-container">
			<ul class="pagination">
				<!-- Pagination links will be added dynamically via JavaScript -->
			</ul>
		</div>
	}
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
	$(document).ready(function () {
		const rowsPerPage = 10; // Number of rows to display per page
		let currentPage = 1;

		// Click event to each row
		$('.clickable-row').on('click', function () {
			const href = $(this).data('href');
			if (href) {
				window.location = href;
			}
		});

		// Function to display the table rows for the selected page and filter options
		function showPage(pageNumber, positionFilter, statusFilter) {
			const rows = $('.table tbody tr');
			const filteredRows = filterRows(positionFilter, statusFilter);

			rows.hide();
			for (let i = (pageNumber - 1) * rowsPerPage; i < pageNumber * rowsPerPage && i < filteredRows.length; i++) {
				$(filteredRows[i]).show();
			}

			currentPage = pageNumber;
			$('.pagination li a').removeClass('active');
			$('.pagination li a[data-page="' + pageNumber + '"]').addClass('active');

			$('.pagination .prev-btn').prop('disabled', pageNumber === 1);
			$('.pagination .next-btn').prop('disabled', pageNumber === totalPages());

			$('.pagination .prev-btn').toggleClass('disabled', pageNumber === 1);
			$('.pagination .next-btn').toggleClass('disabled', pageNumber === totalPages());
		}

		// Helper function to get the description of an enum value
		function getEnumDescriptionForStatus(statusText) {
			const enumDescriptions = {
				"Application Received!": "Received",
				"Shortlisted": "Shortlisted",
				"For Screening": "ForScreening",
				"For HR Interview": "ForHRInterview",
				"For Technical Interview": "ForTechnicalInterview",
				"For Technical Exam": "ForTechnicalExam",
				"Undergoing Background Check": "UndergoingBackgroundCheck",
				"For Final Interview": "ForFinalInterview",
				"Undergoing Job Offer": "UndergoingJobOffer",
				"Confirmed": "Confirmed",
				"Not Confirmed": "NotConfirmed",
				"Onboarding": "Onboarding",
				"Deployed": "Deployed",
				"Rejected": "Rejected",
			};

			return enumDescriptions[statusText] || statusText;
		}

		// Function to filter rows based on the selected position and status
		function filterRows(positionFilter, statusFilter) {
			let rows = $('.table tbody tr');

			if (positionFilter !== 'ALL') {
				rows = rows.filter(function () {
					const positionName = $(this).find('td:nth-child(2)').text().toLowerCase();
					return positionName.includes(positionFilter.toLowerCase());
				});
			}

			if (statusFilter !== 'ALL') {
				rows = rows.filter(function () {
					const statusName = $(this).find('td:nth-child(3)').text().trim();
					const statusValue = getEnumDescriptionForStatus(statusName); 
					return statusValue === statusFilter.trim();
				});
			}

			return rows;
		}

		// Function to calculate the total number of pages based on the number of rows
		function totalPages() {
			const totalRows = filterRows($('#position').val(), $('#status').val()).length;
			return Math.ceil(totalRows / rowsPerPage);
		}

		$('.pagination').on('click', '.prev-btn', function () {
			if (currentPage > 1) {
				showPage(currentPage - 1, $('#position').val(), $('#status').val());
			}
		});

		$('.pagination').on('click', '.next-btn', function () {
			if (currentPage < totalPages()) {
				showPage(currentPage + 1, $('#position').val(), $('#status').val());
			}
		});

		$('.pagination').on('click', 'li a[data-page]', function () {
			const page = parseInt($(this).data('page'));
			showPage(page, $('#position').val(), $('#status').val());
		});

		$('#position, #status').change(function () {
			generatePaginationLinks();
			showPage(1, $('#position').val(), $('#status').val());
		});

		// Function to generate pagination links
		function generatePaginationLinks() {
			const paginationContainer = $('.pagination');
			paginationContainer.empty();

			paginationContainer.append('<li><a href="#" class="prev-btn">Previous</a></li>');
			for (let i = 1; i <= totalPages(); i++) {
				paginationContainer.append(`<li><a href="#" data-page="${i}">${i}</a></li>`);
			}

			paginationContainer.append('<li><a href="#" class="next-btn">Next</a></li>');
			$('.pagination li a[data-page="' + currentPage + '"]').addClass('active');
			$('.pagination .prev-btn').prop('disabled', true);
		}

		generatePaginationLinks();
		showPage(1, $('#position').val(), $('#status').val());
	});
</script>
<script>
	function handleRejectClick(event) {
		event.stopPropagation();
	}
</script>
@foreach (var applicant in Model.applicants.OrderBy(a => a.Name))
{
	@if (applicant.ApplicationStatus != ApplicationStatus.Confirmed && applicant.ApplicationStatus != ApplicationStatus.Onboarding && applicant.ApplicationStatus != ApplicationStatus.Deployed && applicant.ApplicationStatus != ApplicationStatus.Rejected)
	{
		<!-- Reject Modal -->
		<div class="modal fade" id="@("modal-" + applicant.Id)" tabindex="-1" role="dialog" aria-labelledby="RejectApplicantModalLabel" aria-hidden="true">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h5 class="modal-title" id="RejectApplicantModalLabel">Confirm Reject</h5>
						<button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
							<span aria-hidden="true" class="d-none">&times;</span>
						</button>
					</div>
					<div class="modal-body">
						<p>Are you sure you want to reject this applicant?</p>
					</div>
					<div class="modal-footer">
						<form asp-controller="HR" asp-action="UpdateApplicantStatus" method="post">
							<input type="hidden" name="id" value="@applicant.Id" />
							<input type="hidden" name="status" value="Rejected" />
							<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
							<button type="submit" class="btn btn-danger">REJECT</button>
						</form>
					</div>
				</div>
			</div>
		</div>
	}
}
