@using Basecode.Data.Enums;
@using Basecode.Data.ViewModels
@using static Basecode.Data.Enums.Enums;
@using Basecode.Services.Interfaces
@inject IJobPostingsService jobPostingService;
@using System.Drawing;
@model NewHiresViewModel;
@{
	ViewData["Title"] = "New Hires";
	Layout = "_SideBarAdmin";
	<link rel="stylesheet" href="~/css/JobApplicantsOverview.css" />
}

<div class="container container-header">
	<h1>@ViewData["Title"]</h1>
</div>
<div class="table-container">
	<div class="select-container">
		<label for="position">Position:</label>
		<select id="position" name="position" @(Model.CurrentHires.Count == 0 ? "disabled": "")>
			<option value="ALL">ALL</option>
			@foreach (var jobPosting in Model.jobPostings)
			{
				<option value="@jobPosting.Name">@jobPosting.Name</option>
			}
		</select>
	</div>
	<div class="table-responsive">
		<table class="table">
			<thead>
				<tr>
					<th style="border-left: 10px solid #55729B; border-bottom: none;">Applicant Name</th>
					<th>Position Name</th>
					<th>Hire Date</th>
					<th style="border-right: 10px solid #55729B; border-bottom: none;">Status</th>
				</tr>
			</thead>
			<tbody>
				@{if (Model.CurrentHires.Count == 0)
					{
						<tr class="CurrentHires-Empty">
							<td colspan="4">
								No new hires at the moment...
							</td>
						</tr>
					}
					else
					{
						foreach (var applicant in Model.CurrentHires.OrderBy(a => a.Applicant.Name))
						{
							var jobPost = await jobPostingService.GetByIdAsync(applicant.PositionId);
							var positionName = jobPost.Name;
							<tr title="Click to View Applicant Details" class="clickable-row" data-href="/HR/ApplicantDetail/@applicant.ApplicantId">
								<td>@applicant.Applicant.Name</td>
								<td>@positionName</td>
								<td>@applicant.HireDate</td>
								<td>@applicant.HireStatus</td>
							</tr>
						}
					}
				}
			</tbody>
		</table>
	</div>
	@if (Model.CurrentHires.Count > 0)
	{
		<div class="pagination-container">
			<ul class="pagination">
				<!-- Pagination links will be added dynamically via JavaScript -->
			</ul>
		</div>
	}
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
	$(document).ready(function () {
		const rowsPerPage = 10; // Number of rows to display per page
		let currentPage = 1;

		// Function to display the table rows for the selected page and position filter
		function showPage(pageNumber, positionFilter) {
			const rows = $('.table tbody tr');
			const filteredRows = filterRows(positionFilter);

			rows.hide();
			for (let i = (pageNumber - 1) * rowsPerPage; i < pageNumber * rowsPerPage && i < filteredRows.length; i++) {
				$(filteredRows[i]).show();
			}

			currentPage = pageNumber;
			$('.pagination li a').removeClass('active');
			$('.pagination li a[data-page="' + pageNumber + '"]').addClass('active');

			$('.pagination .prev-btn').prop('disabled', pageNumber === 1);
			$('.pagination .next-btn').prop('disabled', pageNumber === totalPages());

			$('.pagination .prev-btn').toggleClass('disabled', pageNumber === 1);
			$('.pagination .next-btn').toggleClass('disabled', pageNumber === totalPages());
		}

		// Click event to each row
		$('.clickable-row').on('click', function () {
			const href = $(this).data('href');
			if (href) {
				window.location = href;
			}
		});

		// Function to filter rows based on the selected position
		function filterRows(positionFilter) {
			let rows = $('.table tbody tr');

			if (positionFilter !== 'ALL') {
				rows = rows.filter(function () {
					const positionName = $(this).find('td:nth-child(2)').text().toLowerCase();
					return positionName.includes(positionFilter.toLowerCase());
				});
			}

			return rows;
		}

		// Function to calculate the total number of pages based on the number of rows
		function totalPages() {
			const totalRows = filterRows($('#position').val()).length;
			return Math.ceil(totalRows / rowsPerPage);
		}

		$('.pagination').on('click', '.prev-btn', function () {
			if (currentPage > 1) {
				showPage(currentPage - 1, $('#position').val());
			}
		});

		$('.pagination').on('click', '.next-btn', function () {
			if (currentPage < totalPages()) {
				showPage(currentPage + 1, $('#position').val());
			}
		});

		$('.pagination').on('click', 'li a[data-page]', function () {
			const page = parseInt($(this).data('page'));
			showPage(page, $('#position').val());
		});

		$('#position').change(function () {
			generatePaginationLinks();
			showPage(1, $('#position').val());
		});

		// Function to generate pagination links
		function generatePaginationLinks() {
			const paginationContainer = $('.pagination');
			paginationContainer.empty();

			paginationContainer.append('<li><a href="#" class="prev-btn">Previous</a></li>');
			for (let i = 1; i <= totalPages(); i++) {
				paginationContainer.append(`<li><a href="#" data-page="${i}">${i}</a></li>`);
			}

			paginationContainer.append('<li><a href="#" class="next-btn">Next</a></li>');
			$('.pagination li a[data-page="' + currentPage + '"]').addClass('active');
			$('.pagination .prev-btn').prop('disabled', true);
		}

		generatePaginationLinks();
		showPage(1, $('#position').val());
	});
</script>
